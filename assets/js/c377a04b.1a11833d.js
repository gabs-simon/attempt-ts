(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[971],{3874:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var i=n(2122),r=n(9756),s=(n(7294),n(3905)),a=["components"],o={sidebar_position:1,id:"index",title:"Overview",slug:"/"},u={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"Overview",description:"Attempt-TS is a series of TypeScript helpers designed to make it easy and beautiful to define and read all types a function can both return and throw.",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/attempt-ts/",editUrl:"https://github.com/gabs-simon/attempt-ts/edit/master/website/docs/index.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"index",title:"Overview",slug:"/"},sidebar:"tutorialSidebar",next:{title:"Attempt",permalink:"/attempt-ts/api/attempt"}},d=[{value:"Quick Guide",id:"quick-guide",children:[]}],c={toc:d};function p(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Attempt-TS is a series of TypeScript helpers designed to make it easy and beautiful to define and read all types a function can both return and throw."),(0,s.kt)("p",null,"It is inspired in the common ",(0,s.kt)("inlineCode",{parentName:"p"},"Maybe<T>")," pattern in TypeScript."),(0,s.kt)("h2",{id:"quick-guide"},"Quick Guide"),(0,s.kt)("p",null,"This is a simple guide describing the most common use cases of Attempt-TS."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Attempt, Failure, Success }\n\nconst division = (a: number, b: number): Attempt<number,string> => {\n  if (b === 0)\n    return Failure("Can\'t divide by zero")\n  return Success(a / b)\n}\n\nAttempt(division(6,2)) // 3\nAttempt(division(1,0)) // throws "Can\'t divide by zero"\n\nconst asyncDivision = async (a: number, b: number): AsyncAttempt<number,string> => {\n  if (b === 0)\n    return Failure("Can\'t divide by zero") // in AsyncAttempts you can either return or throw a failure\n  return Success(a / b)\n}\n\n\nawait AsyncAttempt(asyncDivision(6,2)) // 3\nawait AsyncAttempt(asyncDivision(1,0)) // throws "Can\'t divide by zero"\n')))}p.isMDXComponent=!0}}]);