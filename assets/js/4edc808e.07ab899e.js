(self.webpackChunkattempt_ts_docs=self.webpackChunkattempt_ts_docs||[]).push([[173],{5782:function(t,e,i){"use strict";i.r(e),i.d(e,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var n=i(2122),s=i(9756),a=(i(7294),i(3905)),r=["components"],o={sidebar_position:1,id:"index",title:"Overview",slug:"/"},c={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"Overview",description:"---",source:"@site/docs/index.mdx",sourceDirName:".",slug:"/",permalink:"/attempt-ts/",editUrl:"https://github.com/gabs-simon/attempt-ts/edit/master/website/docs/index.mdx",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"index",title:"Overview",slug:"/"},sidebar:"tutorialSidebar",next:{title:"Attempt",permalink:"/attempt-ts/api/attempt"}},d=[{value:"Overview",id:"overview",children:[]},{value:"Quick Guide",id:"quick-guide",children:[]}],u={toc:d};function m(t){var e=t.components,i=(0,s.Z)(t,r);return(0,a.kt)("wrapper",(0,n.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"attempt-ts"},"Attempt-TS"),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("a",{href:"https://gabs-simon.github.io/attempt-ts/"},(0,a.kt)("img",{src:"https://img.shields.io/badge/docs-here-blue",alt:"Documentation link"})),(0,a.kt)("a",{href:"https://github.com/gabs-simon/attempt-ts/actions/workflows/main.yml"},(0,a.kt)("img",{src:"https://github.com/gabs-simon/attempt-ts/actions/workflows/main.yml/badge.svg",alt:"Github Actions status"})),(0,a.kt)("br",null),(0,a.kt)("a",{href:"https://github.com/prettier/prettier"},(0,a.kt)("img",{alt:"code style: prettier",src:"https://camo.githubusercontent.com/48a41f43affa2e6253d6a48e0ee662ec53ce13c46442ac815e81d36b6e6b434d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d6666363962342e737667","data-canonical-src":"https://img.shields.io/badge/code_style-prettier-ff69b4.svg"})),(0,a.kt)("a",{href:"https://github.com/facebook/jest"},(0,a.kt)("img",{src:"https://camo.githubusercontent.com/3add87b81e938ae6e952a1c8880615aa1b93b904e45fb71a3c96438d536cef27/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7465737465645f776974682d6a6573742d3939343234662e737667",alt:"Tested with Jest","data-canonical-src":"https://img.shields.io/badge/tested_with-jest-99424f.svg"})),(0,a.kt)("a",{href:"#license"},(0,a.kt)("img",{src:"https://camo.githubusercontent.com/b7aa5151f4f1a3a20f32c67ea5c6a3a5d0041e57741fd7465673d7e71f8d7fda/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736f757263657265722d696f2f68616c6c2d6f662d66616d652e7376673f636f6c6f72423d666630303030","data-canonical-src":"https://img.shields.io/github/license/sourcerer-io/hall-of-fame.svg?colorB=ff0000"}))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Attempt-TS is a series of TypeScript helpers designed to make it easy and beautiful to define and read all types a function can both return and throw."),(0,a.kt)("p",null,"It is inspired in the common ",(0,a.kt)("inlineCode",{parentName:"p"},"Maybe<T>")," pattern in TypeScript."),(0,a.kt)("h2",{id:"quick-guide"},"Quick Guide"),(0,a.kt)("p",null,"This is a simple guide describing the most common use cases of Attempt-TS."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Attempt, Failure, Success }\n\nconst division = (a: number, b: number): Attempt<number,string> => {\n  if (b === 0)\n    return Failure("Can\'t divide by zero")\n  return Success(a / b)\n}\n\nAttempt(division(6,2)) // 3\nAttempt(division(1,0)) // throws "Can\'t divide by zero"\n\nconst asyncDivision = async (a: number, b: number): AsyncAttempt<number,string> => {\n  if (b === 0)\n    return Failure("Can\'t divide by zero") // in AsyncAttempts you can either return or throw a failure\n  return Success(a / b)\n}\n\n\nawait AsyncAttempt(asyncDivision(6,2)) // 3\nawait AsyncAttempt(asyncDivision(1,0)) // throws "Can\'t divide by zero"\n')))}m.isMDXComponent=!0}}]);