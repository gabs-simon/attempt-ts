(self.webpackChunkattempt_ts_docs=self.webpackChunkattempt_ts_docs||[]).push([[659],{2513:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return i},metadata:function(){return r},toc:function(){return o},default:function(){return u}});var s=n(2122),a=n(9756),p=(n(7294),n(3905)),c=["components"],i={id:"async-attempt",sidebar_position:2,sidebar_label:"AsyncAttempt"},r={unversionedId:"api/async-attempt",id:"api/async-attempt",isDocsHomePage:!1,title:"AsyncAttempt",description:"AsyncAttempt Type",source:"@site/docs/api/async-attempt.md",sourceDirName:"api",slug:"/api/async-attempt",permalink:"/attempt-ts/api/async-attempt",editUrl:"https://github.com/gabs-simon/attempt-ts/edit/master/website/docs/api/async-attempt.md",version:"current",sidebar_label:"AsyncAttempt",sidebarPosition:2,frontMatter:{id:"async-attempt",sidebar_position:2,sidebar_label:"AsyncAttempt"},sidebar:"tutorialSidebar",previous:{title:"Attempt",permalink:"/attempt-ts/api/attempt"},next:{title:"Success",permalink:"/attempt-ts/api/success"}},o=[{value:"AsyncAttempt Type",id:"asyncattempt-type",children:[]},{value:"AsyncAttempt Function",id:"asyncattempt-function",children:[]}],m={toc:o};function u(t){var e=t.components,n=(0,a.Z)(t,c);return(0,p.kt)("wrapper",(0,s.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"asyncattempt-type"},"AsyncAttempt Type"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"// AsyncAttempt<S,F>\ntype AsyncAttempt<S = any, F = any> = Promise<Attempt<S,F>>\n\n// Usual format of an AsyncAttempt function\nconst AttemptFunction = (...params): AsyncAttempt<S, F> => {\n  const s: S\n  const f: F\n  const result: boolean\n  if (result) return Success(s)\n  else return Failure(f)\n}\n")),(0,p.kt)("p",null,"Defines the return type on an AsyncAttempt function."),(0,p.kt)("h2",{id:"asyncattempt-function"},"AsyncAttempt Function"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"// AsyncAttempt()\nconst AsyncAttempt = async (operation: AsyncAttempt<S,F>): Promise<S>\n\n// A generic asyncattempt function\nconst AsyncAttemptFunction = async (): AsyncAttempt<S,F>\n\n// Returns S or throws F\nconst result = await AsyncAttempt(AsyncAttemptFunction())\n")),(0,p.kt)("p",null,"Unwraps the return value of an AsyncAttempt function, returning a value of type ",(0,p.kt)("inlineCode",{parentName:"p"},"S")," or throwing a value of type ",(0,p.kt)("inlineCode",{parentName:"p"},"F"),"."))}u.isMDXComponent=!0}}]);